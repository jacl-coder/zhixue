syntax = "proto3";

package zhixue;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// 用户性别枚举
enum UserGender {
    USER_GENDER_UNKNOWN = 0;
    USER_GENDER_MALE = 1;
    USER_GENDER_FEMALE = 2;
    USER_GENDER_OTHER = 3;
}

// 用户状态
enum UserStatus {
    USER_STATUS_UNKNOWN = 0;
    USER_STATUS_ACTIVE = 1;
    USER_STATUS_INACTIVE = 2;
    USER_STATUS_BANNED = 3;
}

// 用户角色
enum UserRole {
    USER_ROLE_USER = 0;
    USER_ROLE_ADMIN = 1;
}

message User {
    int64 id = 1;
    string username = 2;
    string email = 3;
    string nickname = 4;
    string avatar_url = 5;
    int32 grade_level = 6;
    UserGender gender = 7;
    UserStatus status = 8;
    UserRole role = 9;
    google.protobuf.Timestamp created_at = 10;
    google.protobuf.Timestamp updated_at = 11;
    google.protobuf.Timestamp last_login_at = 12;
}

// 用户注册请求
message RegisterUserRequest {
    string username = 1;  // 必填，长度3~50
    string password = 2;  // 必填，长度8~128
    string email = 3;     // 必填，格式邮箱
    UserGender gender = 4;
    string nickname = 5;
}

// 用户注册响应
message RegisterUserResponse {
    User user = 1;
}

// 用户登录请求
message LoginUserRequest {
    string username = 1;
    string password = 2;
}

message LoginUserResponse {
    User user = 1;
}

// 获取用户请求
message GetUserRequest {
    int64 user_id = 1;
}

message GetUserResponse {
    User user = 1;
}

// 用户更新请求（多个字段可选同时更新）
message UpdateUserRequest {
    int64 user_id = 1;
    string username = 2;
    string email = 3;
    UserGender gender = 4;
    string nickname = 5;
    string avatar_url = 6;
    int32 grade_level = 7;
    UserStatus status = 8;
    UserRole role = 9;
}

message UpdateUserResponse {
    User user = 1;
}

// 列出用户，分页请求
message ListUsersRequest {
    int32 page_number = 1;      // 页码，默认1
    int32 page_size = 2;        // 每页数量，默认20，最大100
    string filter_username = 3; // 模糊过滤用户名
    UserGender filter_gender = 4;
    UserStatus filter_status = 5;
    int32 filter_grade_level = 6;
}

message ListUsersResponse {
    repeated User users = 1;
    int32 total_count = 2;
}

// ---------------------------------------
// 题目类型枚举
enum QuestionType {
    QUESTION_TYPE_UNKNOWN = 0;
    QUESTION_TYPE_SINGLE_CHOICE = 1;
    QUESTION_TYPE_MULTIPLE_CHOICE = 2;
    QUESTION_TYPE_TRUE_FALSE = 3;
    QUESTION_TYPE_FILL_BLANK = 4;
    QUESTION_TYPE_SUBJECTIVE = 5;
}

// 题目难度等级
enum QuestionDifficulty {
    DIFFICULTY_UNKNOWN = 0;
    DIFFICULTY_EASY = 1;
    DIFFICULTY_MEDIUM = 2;
    DIFFICULTY_HARD = 3;
}

// 审核状态
enum ReviewStatus {
    REVIEW_STATUS_DRAFT = 0;
    REVIEW_STATUS_REVIEWING = 1;
    REVIEW_STATUS_APPROVED = 2;
    REVIEW_STATUS_REJECTED = 3;
}

// 选项消息
message Option {
    string key = 1;      // 选项标识，如 A、B、C
    string content = 2;  // 选项文本内容
    string image_url = 3; // 选项图片（可选）
}

message Question {
    int64 id = 1;
    string title = 2;
    string content = 3;
    QuestionType type = 4;
    QuestionDifficulty difficulty = 5;
    int32 grade_level = 6;
    repeated Option options = 7;
    string answer = 8;
    string explanation = 9;
    int64 author_id = 10;
    ReviewStatus review_status = 11;
    google.protobuf.Timestamp created_at = 12;
    google.protobuf.Timestamp updated_at = 13;
}

// 创建题目请求
message CreateQuestionRequest {
    string title = 1;
    string content = 2;
    QuestionType type = 3;
    QuestionDifficulty difficulty = 4;
    int32 grade_level = 5;
    repeated Option options = 6;
    string answer = 7;
    string explanation = 8;
}

// 创建题目响应
message CreateQuestionResponse {
    Question question = 1;
}

// 获取题目请求
message GetQuestionRequest {
    int64 question_id = 1;
}

message GetQuestionResponse {
    Question question = 1;
}

// 更新题目请求（全部字段可选）
message UpdateQuestionRequest {
    int64 question_id = 1;
    string title = 2;
    string content = 3;
    QuestionType type = 4;
    QuestionDifficulty difficulty = 5;
    int32 grade_level = 6;
    repeated Option options = 7;
    string answer = 8;
    string explanation = 9;
    ReviewStatus review_status = 10;
}

message UpdateQuestionResponse {
    Question question = 1;
}

// 删除题目请求
message DeleteQuestionRequest {
    int64 question_id = 1;
}

message DeleteQuestionResponse {
    google.protobuf.Empty empty = 1;
}

// 列出题目，分页和筛选
message ListQuestionsRequest {
    int32 page_number = 1;      // 默认1
    int32 page_size = 2;        // 默认20，最大100
    QuestionType filter_type = 3;
    QuestionDifficulty filter_difficulty = 4;
    int32 filter_grade_level = 5;
    string filter_keyword = 6;
}

message ListQuestionsResponse {
    repeated Question questions = 1;
    int32 total_count = 2;
}

// ---------------------------------------
// 答题方式枚举
enum AnswerMethod {
    ANSWER_METHOD_UNKNOWN = 0;
    ANSWER_METHOD_SELECT = 1;
    ANSWER_METHOD_INPUT = 2;
    ANSWER_METHOD_VOICE = 3;
}

message Record {
    int64 id = 1;
    int64 user_id = 2;
    int64 question_id = 3;
    string session_id = 4;       // 会话ID
    string answer = 5;
    bool is_correct = 6;
    int32 response_time = 7;     // 响应时间，单位秒
    int32 hint_used_count = 8;
    double confidence_score = 9;
    AnswerMethod answer_method = 10;
    string ip_address = 11;
    string device_info = 12;     // json字符串或结构化信息
    google.protobuf.Timestamp created_at = 13;
    google.protobuf.Timestamp updated_at = 14;
}

message CreateRecordRequest {
    int64 user_id = 1;
    int64 question_id = 2;
    string session_id = 3;
    string answer = 4;
    bool is_correct = 5;
    int32 response_time = 6;
    int32 hint_used_count = 7;
    double confidence_score = 8;
    AnswerMethod answer_method = 9;
    string ip_address = 10;
    string device_info = 11;
}

message CreateRecordResponse {
    Record record = 1;
}

message GetRecordRequest {
    int64 record_id = 1;
}

message GetRecordResponse {
    Record record = 1;
}

message ListRecordsRequest {
    int32 page_number = 1;
    int32 page_size = 2;
    int64 filter_user_id = 3;
    int64 filter_question_id = 4;
}

message ListRecordsResponse {
    repeated Record records = 1;
    int32 total_count = 2;
}

// ---------------------------------------
// AI相关
message RecommendDifficultyRequest {
    int64 user_id = 1;
}

message RecommendDifficultyResponse {
    QuestionDifficulty difficulty = 1;
}

message StrategyParams {
    double difficulty_weight = 1;
    double time_weight = 2;
    // 你可以根据需求扩展字段
}

message AdjustStrategyRequest {
    int64 user_id = 1;
    StrategyParams strategy_params = 2;
}

message AdjustStrategyResponse {
    bool success = 1;
}

// ---------------------------------------
// 任务相关

enum TaskStatus {
    TASK_STATUS_UNKNOWN = 0;
    TASK_STATUS_AVAILABLE = 1;
    TASK_STATUS_RECEIVED = 2;
    TASK_STATUS_COMPLETED = 3;
}

message Task {
    int64 id = 1;
    string title = 2;
    string description = 3;
    TaskStatus status = 4;
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp updated_at = 6;
}

message UserTask {
    int64 id = 1;
    int64 user_id = 2;
    int64 task_id = 3;
    TaskStatus status = 4;
    int32 progress = 5;
    google.protobuf.Timestamp completed_at = 6;
    google.protobuf.Timestamp created_at = 7;
}

// 任务列表请求
message ListTasksRequest {
    int32 page_number = 1;
    int32 page_size = 2;
    TaskStatus filter_status = 3;
    int64 filter_user_id = 4;
}

message ListTasksResponse {
    repeated Task tasks = 1;
    int32 total_count = 2;
}

message ListUserTasksRequest {
    int32 page_number = 1;
    int32 page_size = 2;
    TaskStatus filter_status = 3;
    int64 filter_user_id = 4;
}

message ListUserTasksResponse {
    repeated UserTask user_tasks = 1;
    int32 total_count = 2;
}

message AcceptTaskRequest {
    int64 task_id = 1;
    int64 user_id = 2;
}

message AcceptTaskResponse {
    UserTask user_task = 1;
}

message CompleteTaskRequest {
    int64 task_id = 1;
    int64 user_id = 2;
}

message CompleteTaskResponse {
    UserTask user_task = 1;
}

// ---------------------------------------
// 服务定义

service UserService {
    rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse);
    rpc LoginUser(LoginUserRequest) returns (LoginUserResponse);
    rpc GetUser(GetUserRequest) returns (GetUserResponse);
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
    rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
}

service QuestionService {
    rpc CreateQuestion(CreateQuestionRequest) returns (CreateQuestionResponse);
    rpc GetQuestion(GetQuestionRequest) returns (GetQuestionResponse);
    rpc UpdateQuestion(UpdateQuestionRequest) returns (UpdateQuestionResponse);
    rpc DeleteQuestion(DeleteQuestionRequest) returns (DeleteQuestionResponse);
    rpc ListQuestions(ListQuestionsRequest) returns (ListQuestionsResponse);
}

service RecordService {
    rpc CreateRecord(CreateRecordRequest) returns (CreateRecordResponse);
    rpc GetRecord(GetRecordRequest) returns (GetRecordResponse);
    rpc ListRecords(ListRecordsRequest) returns (ListRecordsResponse);
}

service AIService {
    rpc RecommendDifficulty(RecommendDifficultyRequest) returns (RecommendDifficultyResponse);
    rpc AdjustStrategy(AdjustStrategyRequest) returns (AdjustStrategyResponse);
}

service TaskService {
    rpc ListTasks(ListTasksRequest) returns (ListTasksResponse);
    rpc ListUserTasks(ListUserTasksRequest) returns (ListUserTasksResponse);
    rpc AcceptTask(AcceptTaskRequest) returns (AcceptTaskResponse);
    rpc CompleteTask(CompleteTaskRequest) returns (CompleteTaskResponse);
}
